package report

import (
	"fmt"
	"strings"
	"time"

	"github.com/jung-kurt/gofpdf"
)

type ComplianceResult struct {
	Timestamp       time.Time
	Provider        string
	AccountID       string
	Framework       string // Which framework(s) being reported
	Score           float64
	TotalControls   int
	PassedControls  int
	FailedControls  int
	Controls        []ControlResult
	Recommendations []string
}

type ControlResult struct {
	ID              string
	Name            string
	Category        string
	Severity        string
	Status          string
	Evidence        string
	Remediation     string
	ScreenshotGuide string
	ConsoleURL      string
	Frameworks      map[string]string // Framework mappings
}

func GeneratePDF(result ComplianceResult, outputPath string) error {
	pdf := gofpdf.New("P", "mm", "A4", "")
	pdf.SetMargins(15, 15, 15)
	
	// Set footer function to appear on every page
	pdf.SetFooterFunc(func() {
		pdf.SetY(-15)
		pdf.SetFont("Arial", "", 8)
		pdf.SetTextColor(108, 117, 125)
		pdf.CellFormat(0, 5, "Generated by AuditKit - Multi-Cloud Compliance Scanner", "", 1, "C", false, 0, "")
		pdf.CellFormat(0, 5, "For support and documentation, visit auditkit.io", "", 0, "C", false, 0, "")
	})
	
	// Cover Page
	generateCoverPage(pdf, result)
	
	// Executive Summary
	generateExecutiveSummary(pdf, result)
	
	// Critical Issues
	generateCriticalIssues(pdf, result)
	
	// Evidence Collection Guide
	generateEvidenceGuide(pdf, result)
	
	// Passed Controls Summary
	generatePassedControlsPDF(pdf, result)
	
	// Evidence Checklist
	generateEvidenceChecklist(pdf, result)
	
	return pdf.OutputFileAndClose(outputPath)
}

func generateCoverPage(pdf *gofpdf.Fpdf, result ComplianceResult) {
	pdf.AddPage()
	
	// AuditKit Logo Area (top)
	pdf.SetFont("Arial", "B", 32)
	pdf.SetTextColor(3, 102, 214) // Brand blue
	pdf.CellFormat(0, 20, "AuditKit", "", 1, "C", false, 0, "")
	
	pdf.SetFont("Arial", "", 12)
	pdf.SetTextColor(108, 117, 125) // Gray
	pdf.CellFormat(0, 6, "Multi-Cloud Compliance Scanner", "", 1, "C", false, 0, "")
	pdf.Ln(20)
	
	// Framework Title
	frameworkLabel := "Multi-Framework Compliance Report"
	if result.Framework != "" && result.Framework != "all" {
		frameworkLabel = strings.ToUpper(result.Framework) + " Compliance Report"
	}
	
	pdf.SetFont("Arial", "B", 28)
	pdf.SetTextColor(0, 0, 0)
	pdf.MultiCell(0, 12, frameworkLabel, "", "C", false)
	pdf.Ln(30)
	
	// Compliance Score - Large Circle
	drawScoreCircle(pdf, result.Score)
	pdf.Ln(20)
	
	// Quick Stats
	pdf.SetFont("Arial", "", 11)
	pdf.SetTextColor(108, 117, 125)
	
	statsY := pdf.GetY()
	
	// Total Controls
	pdf.SetXY(30, statsY)
	pdf.SetFont("Arial", "B", 24)
	pdf.SetTextColor(0, 0, 0)
	pdf.CellFormat(50, 10, fmt.Sprintf("%d", result.TotalControls), "", 1, "C", false, 0, "")
	pdf.SetXY(30, pdf.GetY())
	pdf.SetFont("Arial", "", 10)
	pdf.SetTextColor(108, 117, 125)
	pdf.CellFormat(50, 6, "Total Controls", "", 0, "C", false, 0, "")
	
	// Passed
	pdf.SetXY(85, statsY)
	pdf.SetFont("Arial", "B", 24)
	pdf.SetTextColor(40, 167, 69) // Green
	pdf.CellFormat(50, 10, fmt.Sprintf("%d", result.PassedControls), "", 1, "C", false, 0, "")
	pdf.SetXY(85, pdf.GetY())
	pdf.SetFont("Arial", "", 10)
	pdf.SetTextColor(108, 117, 125)
	pdf.CellFormat(50, 6, "Passed", "", 0, "C", false, 0, "")
	
	// Failed
	pdf.SetXY(140, statsY)
	pdf.SetFont("Arial", "B", 24)
	pdf.SetTextColor(220, 53, 69) // Red
	pdf.CellFormat(50, 10, fmt.Sprintf("%d", result.FailedControls), "", 1, "C", false, 0, "")
	pdf.SetXY(140, pdf.GetY())
	pdf.SetFont("Arial", "", 10)
	pdf.SetTextColor(108, 117, 125)
	pdf.CellFormat(50, 6, "Failed", "", 0, "C", false, 0, "")
	
	pdf.Ln(30)
	
	// Report Details
	pdf.SetY(250)
	pdf.SetFont("Arial", "", 10)
	pdf.SetTextColor(108, 117, 125)
	pdf.CellFormat(0, 5, fmt.Sprintf("Generated: %s", result.Timestamp.Format("January 2, 2006 at 3:04 PM")), "", 1, "C", false, 0, "")
	pdf.CellFormat(0, 5, fmt.Sprintf("Provider: %s | Account: %s", strings.ToUpper(result.Provider), result.AccountID), "", 1, "C", false, 0, "")
	
	if result.Framework == "all" {
		pdf.CellFormat(0, 5, "Coverage: SOC2, PCI-DSS, HIPAA, CMMC", "", 1, "C", false, 0, "")
	}
}

func drawScoreCircle(pdf *gofpdf.Fpdf, score float64) {
	// Draw a large circle with the score
	centerX := 105.0
	centerY := pdf.GetY() + 25
	radius := 25.0
	
	// Determine color based on score
	var r, g, b int
	if score < 60 {
		r, g, b = 220, 53, 69 // Red
	} else if score < 80 {
		r, g, b = 255, 193, 7 // Amber
	} else {
		r, g, b = 40, 167, 69 // Green
	}
	
	// Draw circle background
	pdf.SetFillColor(r, g, b)
	pdf.SetAlpha(0.1, "Normal")
	pdf.Circle(centerX, centerY, radius, "F")
	pdf.SetAlpha(1.0, "Normal")
	
	// Draw circle border
	pdf.SetDrawColor(r, g, b)
	pdf.SetLineWidth(2)
	pdf.Circle(centerX, centerY, radius, "D")
	pdf.SetLineWidth(0.2)
	
	// Draw score text
	pdf.SetXY(centerX-25, centerY-10)
	pdf.SetFont("Arial", "B", 36)
	pdf.SetTextColor(r, g, b)
	pdf.CellFormat(50, 15, fmt.Sprintf("%.0f%%", score), "", 1, "C", false, 0, "")
	
	pdf.SetXY(centerX-25, centerY+5)
	pdf.SetFont("Arial", "", 11)
	pdf.SetTextColor(108, 117, 125)
	pdf.CellFormat(50, 6, "Compliance Score", "", 0, "C", false, 0, "")
}

func generateExecutiveSummary(pdf *gofpdf.Fpdf, result ComplianceResult) {
	pdf.AddPage()
	
	// Title
	pdf.SetFont("Arial", "B", 20)
	pdf.SetTextColor(0, 0, 0)
	pdf.CellFormat(0, 12, "Executive Summary", "", 1, "L", false, 0, "")
	pdf.Ln(5)
	
	// Summary box
	pdf.SetFillColor(246, 248, 250)
	pdf.Rect(15, pdf.GetY(), 180, 40, "F")
	
	pdf.SetFont("Arial", "", 11)
	pdf.SetTextColor(33, 37, 41)
	summaryY := pdf.GetY() + 8
	pdf.SetXY(20, summaryY)
	
	statusText := "requires immediate attention"
	if result.Score >= 80 {
		statusText = "is in good standing"
	} else if result.Score >= 60 {
		statusText = "needs improvement"
	}
	
	summary := fmt.Sprintf("Your %s environment %s with a compliance score of %.1f%%. Out of %d controls evaluated, %d passed and %d failed. Immediate action is required on %d critical issues.",
		strings.ToUpper(result.Provider),
		statusText,
		result.Score,
		result.TotalControls,
		result.PassedControls,
		result.FailedControls,
		countCritical(result.Controls))
	
	pdf.MultiCell(170, 5, summary, "", "L", false)
	pdf.Ln(10)
	
	// Priority actions
	if len(result.Recommendations) > 0 {
		pdf.SetFont("Arial", "B", 14)
		pdf.SetTextColor(0, 0, 0)
		pdf.CellFormat(0, 10, "Top Priority Actions", "", 1, "L", false, 0, "")
		
		pdf.SetFont("Arial", "", 10)
		pdf.SetTextColor(33, 37, 41)
		
		for i, rec := range result.Recommendations {
			if i >= 5 {
				break
			}
			
			// Determine color based on severity keywords
			if strings.Contains(rec, "CRITICAL") {
				pdf.SetTextColor(220, 53, 69)
				pdf.SetFont("Arial", "B", 10)
			} else if strings.Contains(rec, "HIGH") {
				pdf.SetTextColor(255, 193, 7)
				pdf.SetFont("Arial", "B", 10)
			} else {
				pdf.SetTextColor(33, 37, 41)
				pdf.SetFont("Arial", "", 10)
			}
			
			pdf.CellFormat(10, 6, fmt.Sprintf("%d.", i+1), "", 0, "L", false, 0, "")
			pdf.MultiCell(170, 6, rec, "", "L", false)
			pdf.Ln(2)
		}
	}
}

func generateCriticalIssues(pdf *gofpdf.Fpdf, result ComplianceResult) {
	pdf.AddPage()
	
	// Title
	pdf.SetFont("Arial", "B", 20)
	pdf.SetTextColor(220, 53, 69)
	
	criticalTitle := "Critical Issues - Fix Immediately"
	if result.Framework == "pci" {
		criticalTitle = "PCI-DSS Critical Violations"
	} else if result.Framework == "hipaa" {
		criticalTitle = "HIPAA Security Rule Violations"
	} else if result.Framework == "cmmc" {
		criticalTitle = "CMMC Level 2 Critical Findings"
	}
	
	pdf.CellFormat(0, 12, criticalTitle, "", 1, "L", false, 0, "")
	
	pdf.SetFont("Arial", "", 10)
	pdf.SetTextColor(108, 117, 125)
	pdf.MultiCell(0, 5, "These issues must be resolved before your audit. Each failure represents a significant compliance gap.", "", "L", false)
	pdf.Ln(8)
	
	criticalCount := 0
	for _, control := range result.Controls {
		if control.Status == "FAIL" && control.Severity == "CRITICAL" {
			criticalCount++
			generateControlCard(pdf, control, criticalCount, result.Framework)
		}
	}
	
	if criticalCount == 0 {
		pdf.SetFillColor(212, 244, 221)
		pdf.Rect(15, pdf.GetY(), 180, 15, "F")
		pdf.SetTextColor(40, 167, 69)
		pdf.SetFont("Arial", "B", 11)
		pdf.CellFormat(0, 15, "[PASS] No critical issues found - excellent work!", "", 1, "C", false, 0, "")
	}
}

func generateControlCard(pdf *gofpdf.Fpdf, control ControlResult, number int, framework string) {
	startY := pdf.GetY()
	
	// Check if we need a new page
	if startY > 240 {
		pdf.AddPage()
		startY = pdf.GetY()
	}
	
	// Card background
	pdf.SetFillColor(254, 242, 242)
	pdf.Rect(15, startY, 180, 0, "F")
	
	// Control header
	pdf.SetFont("Arial", "B", 12)
	pdf.SetTextColor(220, 53, 69)
	
	controlLabel := fmt.Sprintf("%d. [%s] %s", number, control.ID, control.Name)
	if control.Frameworks != nil && framework != "all" && framework != "" {
		if req, ok := control.Frameworks[strings.ToUpper(framework)]; ok {
			controlLabel = fmt.Sprintf("%d. [%s %s] %s", number, strings.ToUpper(framework), req, control.Name)
		}
	}
	
	pdf.SetXY(20, startY+3)
	pdf.MultiCell(170, 6, controlLabel, "", "L", false)
	
	// Issue description
	pdf.SetFont("Arial", "", 10)
	pdf.SetTextColor(33, 37, 41)
	pdf.SetX(20)
	pdf.MultiCell(170, 5, fmt.Sprintf("Issue: %s", control.Evidence), "", "L", false)
	pdf.Ln(2)
	
	// Remediation (in code-like box)
	if control.Remediation != "" {
		pdf.SetFont("Courier", "", 9)
		pdf.SetTextColor(0, 0, 0)
		pdf.SetFillColor(248, 249, 250)
		
		remediationY := pdf.GetY()
		pdf.Rect(20, remediationY, 170, 0, "F")
		
		pdf.SetXY(23, remediationY+2)
		pdf.MultiCell(164, 4, fmt.Sprintf("$ %s", control.Remediation), "", "L", false)
		
		// Draw border around remediation
		endY := pdf.GetY()
		pdf.SetDrawColor(222, 226, 230)
		pdf.Rect(20, remediationY, 170, endY-remediationY+2, "D")
	}
	
	// Card border
	endY := pdf.GetY() + 3
	pdf.SetDrawColor(220, 53, 69)
	pdf.SetLineWidth(0.5)
	pdf.Rect(15, startY, 180, endY-startY, "D")
	pdf.SetLineWidth(0.2)
	
	pdf.SetY(endY + 5)
}

func generateEvidenceGuide(pdf *gofpdf.Fpdf, result ComplianceResult) {
	pdf.AddPage()
	
	// Title
	pdf.SetFont("Arial", "B", 20)
	pdf.SetTextColor(0, 0, 0)
	pdf.CellFormat(0, 12, "Evidence Collection Guide", "", 1, "L", false, 0, "")
	
	pdf.SetFont("Arial", "", 10)
	pdf.SetTextColor(108, 117, 125)
	
	evidenceNote := "Your auditor requires screenshots proving each control is properly configured."
	if result.Framework == "pci" {
		evidenceNote = "QSA (Qualified Security Assessor) requires documented evidence for PCI-DSS compliance."
	} else if result.Framework == "hipaa" {
		evidenceNote = "HIPAA audit requires documentation of all technical safeguards."
	} else if result.Framework == "cmmc" {
		evidenceNote = "C3PAO assessor requires evidence artifacts for each CMMC practice."
	}
	
	pdf.MultiCell(0, 5, evidenceNote+" Follow these steps:", "", "L", false)
	pdf.Ln(8)
	
	// Failed controls needing evidence
	failedControls := []ControlResult{}
	for _, control := range result.Controls {
		if control.Status == "FAIL" {
			failedControls = append(failedControls, control)
		}
	}
	
	if len(failedControls) > 0 {
		pdf.SetFont("Arial", "B", 14)
		pdf.SetTextColor(220, 53, 69)
		pdf.CellFormat(0, 8, "Failed Controls - Fix Then Screenshot", "", 1, "L", false, 0, "")
		pdf.Ln(3)
		
		for i, control := range failedControls {
			if i >= 10 {
				pdf.SetFont("Arial", "I", 10)
				pdf.SetTextColor(108, 117, 125)
				pdf.CellFormat(0, 6, fmt.Sprintf("... and %d more (see full report)", len(failedControls)-10), "", 1, "L", false, 0, "")
				break
			}
			
			generateEvidenceCard(pdf, control, i+1)
		}
	}
}

func generateEvidenceCard(pdf *gofpdf.Fpdf, control ControlResult, number int) {
	startY := pdf.GetY()
	
	if startY > 240 {
		pdf.AddPage()
		startY = pdf.GetY()
	}
	
	// Card background
	pdf.SetFillColor(255, 255, 255)
	pdf.SetDrawColor(222, 226, 230)
	pdf.Rect(15, startY, 180, 0, "FD")
	
	// Title
	pdf.SetFont("Arial", "B", 11)
	pdf.SetTextColor(0, 0, 0)
	pdf.SetXY(20, startY+3)
	pdf.CellFormat(0, 6, fmt.Sprintf("%d. %s - %s", number, control.ID, control.Name), "", 1, "L", false, 0, "")
	
	// Console URL (if exists)
	if control.ConsoleURL != "" {
		pdf.SetFont("Arial", "", 9)
		pdf.SetTextColor(3, 102, 214)
		pdf.SetX(20)
		pdf.CellFormat(0, 5, fmt.Sprintf("Console: %s", control.ConsoleURL), "", 1, "L", false, 0, "")
	}
	
	// Screenshot guide
	if control.ScreenshotGuide != "" {
		pdf.SetFont("Arial", "", 9)
		pdf.SetTextColor(73, 80, 87)
		
		steps := strings.Split(control.ScreenshotGuide, "\n")
		for _, step := range steps {
			step = strings.TrimSpace(step)
			if len(step) > 0 {
				pdf.SetX(23)
				pdf.MultiCell(167, 4, fmt.Sprintf("- %s", step), "", "L", false)
			}
		}
	}
	
	endY := pdf.GetY() + 3
	pdf.SetDrawColor(222, 226, 230)
	pdf.Rect(15, startY, 180, endY-startY, "D")
	
	pdf.SetY(endY + 3)
}

func generatePassedControlsPDF(pdf *gofpdf.Fpdf, result ComplianceResult) {
	passedControls := []ControlResult{}
	for _, control := range result.Controls {
		if control.Status == "PASS" {
			passedControls = append(passedControls, control)
		}
	}
	
	if len(passedControls) == 0 {
		return
	}
	
	pdf.AddPage()
	
	pdf.SetFont("Arial", "B", 20)
	pdf.SetTextColor(40, 167, 69)
	pdf.CellFormat(0, 12, "Passed Controls", "", 1, "L", false, 0, "")
	
	pdf.SetFont("Arial", "", 10)
	pdf.SetTextColor(108, 117, 125)
	pdf.MultiCell(0, 5, "These controls passed automated checks. You still need screenshots for audit evidence.", "", "L", false)
	pdf.Ln(8)
	
	pdf.SetFont("Arial", "", 10)
	pdf.SetTextColor(33, 37, 41)
	
	for _, control := range passedControls {
		pdf.SetTextColor(40, 167, 69)
		pdf.CellFormat(15, 5, "[PASS]", "", 0, "L", false, 0, "")
		
		pdf.SetTextColor(33, 37, 41)
		label := fmt.Sprintf("%s - %s", control.ID, control.Name)
		pdf.MultiCell(165, 5, label, "", "L", false)
		pdf.Ln(1) // Add small space between controls
	}
}

func generateEvidenceChecklist(pdf *gofpdf.Fpdf, result ComplianceResult) {
	pdf.AddPage()
	
	checklistTitle := "Evidence Collection Checklist"
	if result.Framework != "" && result.Framework != "all" {
		checklistTitle = strings.ToUpper(result.Framework) + " Evidence Checklist"
	}
	
	pdf.SetFont("Arial", "B", 20)
	pdf.SetTextColor(0, 0, 0)
	pdf.CellFormat(0, 12, checklistTitle, "", 1, "L", false, 0, "")
	
	pdf.SetFont("Arial", "", 10)
	pdf.SetTextColor(108, 117, 125)
	pdf.CellFormat(0, 5, "Check off each item as you collect evidence for your audit", "", 1, "L", false, 0, "")
	pdf.Ln(8)
	
	checklistItems := getFrameworkChecklist(result.Framework)
	
	pdf.SetFont("Arial", "", 10)
	pdf.SetTextColor(33, 37, 41)
	
	for _, item := range checklistItems {
		pdf.SetX(20)
		// Remove any bullet characters that might be in the string
		cleanItem := strings.ReplaceAll(item, "•", "-")
		cleanItem = strings.ReplaceAll(cleanItem, "→", "->")
		pdf.MultiCell(170, 6, cleanItem, "", "L", false)
	}
	
	// Footer is now automatically added by SetFooterFunc
}

func getFrameworkChecklist(framework string) []string {
	switch strings.ToLower(framework) {
	case "pci", "pci-dss":
		return []string{
			"[ ] Cardholder Data Environment (CDE) Network Diagram",
			"[ ] Firewall Configuration Screenshots (Requirement 1)",
			"[ ] User Access Control Matrix (Requirement 7)",
			"[ ] MFA Configuration for All Admin Access (Requirement 8.3)",
			"[ ] Password Policy Settings (Requirement 8.2)",
			"[ ] Access Key Rotation Report (< 90 days)",
			"[ ] Encryption Settings for Data at Rest (Requirement 3.4)",
			"[ ] Audit Log Configuration (Requirement 10)",
			"[ ] Log Retention Settings (90+ days minimum)",
			"[ ] Vulnerability Scan Results (Requirement 11)",
			"[ ] Security Patch Documentation (Requirement 6.2)",
			"[ ] Incident Response Plan (Requirement 12.10)",
		}
	case "hipaa":
		return []string{
			"[ ] Access Control Documentation (164.312(a)(1))",
			"[ ] Unique User Identification Settings (164.312(a)(2)(i))",
			"[ ] Automatic Logoff Configuration (164.312(a)(2)(iii))",
			"[ ] Encryption/Decryption Methods (164.312(a)(2)(iv))",
			"[ ] Audit Logs and Controls (164.312(b))",
			"[ ] Integrity Controls Documentation (164.312(c)(1))",
			"[ ] Transmission Security Settings (164.312(e)(1))",
			"[ ] Business Associate Agreements (BAAs)",
			"[ ] Risk Assessment Documentation",
			"[ ] Workforce Training Records",
			"[ ] Contingency Plan and Backup Procedures",
			"[ ] Physical Safeguards Documentation",
		}
	case "cmmc":
		return []string{
			"[ ] Access Control Policy (AC.L2-3.1.1 - 3.1.22)",
			"[ ] Awareness and Training Records (AT.L2-3.2.1 - 3.2.3)",
			"[ ] Audit and Accountability Logs (AU.L2-3.3.1 - 3.3.9)",
			"[ ] Configuration Management Documentation (CM.L2-3.4.1 - 3.4.9)",
			"[ ] Identification and Authentication (IA.L2-3.5.1 - 3.5.11)",
			"[ ] Incident Response Plan (IR.L2-3.6.1 - 3.6.3)",
			"[ ] Maintenance Documentation (MA.L2-3.7.1 - 3.7.6)",
			"[ ] Media Protection Procedures (MP.L2-3.8.1 - 3.8.9)",
			"[ ] Personnel Security (PS.L2-3.9.1 - 3.9.2)",
			"[ ] Physical Protection (PE.L2-3.10.1 - 3.10.6)",
			"[ ] Risk Assessment Documentation (RA.L2-3.11.1 - 3.11.4)",
			"[ ] Security Assessment Reports (CA.L2-3.12.1 - 3.12.5)",
			"[ ] System and Communications Protection (SC.L2-3.13.1 - 3.13.16)",
			"[ ] System and Information Integrity (SI.L2-3.14.1 - 3.14.7)",
		}
	default: // SOC2 or all
		return []string{
			"[ ] AWS Account Summary Page (showing account ID)",
			"[ ] IAM Dashboard (showing MFA status)",
			"[ ] Password Policy Settings",
			"[ ] S3 Bucket List (showing encryption icons)",
			"[ ] S3 Public Access Settings (per bucket)",
			"[ ] CloudTrail Dashboard (showing logging enabled)",
			"[ ] Security Groups List (showing no 0.0.0.0/0)",
			"[ ] IAM Users List (showing MFA column)",
			"[ ] Access Key Age Report",
			"[ ] RDS Instance Encryption Settings",
			"[ ] EBS Volume Encryption Settings",
			"[ ] VPC Flow Logs Configuration",
			"[ ] AWS Config Dashboard",
			"[ ] GuardDuty Status (if enabled)",
			"[ ] Systems Manager Compliance Dashboard",
		}
	}
}

func countCritical(controls []ControlResult) int {
	count := 0
	for _, control := range controls {
		if control.Status == "FAIL" && control.Severity == "CRITICAL" {
			count++
		}
	}
	return count
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
